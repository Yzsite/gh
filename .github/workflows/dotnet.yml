# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    if: |
      !contains(github.event.head_commit.message, 'skip ci')

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
    - name: Publish win-x86
      run: dotnet publish -c Release -r win-x86 -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:PublishTrimmed=true -p:TrimMode=partial --self-contained true
    - name: Publish win-x64
      run: dotnet publish -c Release -r win-x64 -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:PublishTrimmed=true -p:TrimMode=partial --self-contained true
    - name: Publish win-arm64
      run: dotnet publish -c Release -r win-arm64 -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:PublishTrimmed=true -p:TrimMode=partial --self-contained true
    - name: Publish linux-x64
      run: dotnet publish -c Release -r linux-x64 -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:PublishTrimmed=true -p:TrimMode=partial --self-contained true
    - name: Publish linux-musl-x64
      run: dotnet publish -c Release -r linux-musl-x64 -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:PublishTrimmed=true -p:TrimMode=partial --self-contained true
    - name: Publish linux-arm
      run: dotnet publish -c Release -r linux-arm -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:PublishTrimmed=true -p:TrimMode=partial --self-contained true
    - name: Publish linux-arm64
      run: dotnet publish -c Release -r linux-arm64 -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:PublishTrimmed=true -p:TrimMode=partial --self-contained true
    - name: Publish osx-x64
      run: dotnet publish -c Release -r osx-x64 -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:PublishTrimmed=true -p:TrimMode=partial --self-contained true
    - name: Publish osx.11.0-arm64
      run: dotnet publish -c Release -r osx.11.0-arm64 -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:PublishTrimmed=true -p:TrimMode=partial --self-contained true

    - name: Upload win-x86 R2R binaries
      uses: actions/upload-artifact@v3
      with:
        name: win-x86 R2R Binaries
        path: '*/bin/Release/*/win-x86/publish/'

    - name: Upload win-x64 R2R binaries
      uses: actions/upload-artifact@v3
      with:
        name: win-x64 R2R Binaries
        path: '*/bin/Release/*/win-x64/publish/'

    - name: Upload win-arm64 R2R binaries
      uses: actions/upload-artifact@v3
      with:
        name: win-arm64 R2R Binaries
        path: '*/bin/Release/*/win-arm64/publish/'

    - name: Upload linux-x64 R2R binaries
      uses: actions/upload-artifact@v3
      with:
        name: linux-x64 R2R Binaries
        path: '*/bin/Release/*/linux-x64/publish/'

    - name: Upload linux-musl-x64 R2R binaries
      uses: actions/upload-artifact@v3
      with:
        name: linux-musl-x64 R2R Binaries
        path: '*/bin/Release/*/linux-musl-x64/publish/'

    - name: Upload linux-arm R2R binaries
      uses: actions/upload-artifact@v3
      with:
        name: linux-arm R2R Binaries
        path: '*/bin/Release/*/linux-arm/publish/'

    - name: Upload linux-arm64 R2R binaries
      uses: actions/upload-artifact@v3
      with:
        name: linux-arm64 R2R Binaries
        path: '*/bin/Release/*/linux-arm64/publish/'

    - name: Upload osx-x64 R2R binaries
      uses: actions/upload-artifact@v3
      with:
        name: osx-x64 R2R Binaries
        path: '*/bin/Release/*/osx-x64/publish/'

    - name: Upload osx.11.0-arm64 R2R binaries
      uses: actions/upload-artifact@v3
      with:
        name: osx.11.0-arm64 R2R Binaries
        path: '*/bin/Release/*/osx.11.0-arm64/publish/'

    - name: Create Release
      # You may pin to the exact commit or the version.
      # uses: ncipollo/release-action@a2e71bdd4e7dab70ca26a852f29600c98b33153e
      uses: ncipollo/release-action@v1.12.0
      if: |
        github.event_name == 'push'
      with:
        # An optional flag which indicates if we should update a release if it already exists. Defaults to false.
        allowUpdates: true # optional, default is 
        # An optional flag which indicates if artifact read or upload errors should fail the build.
        artifactErrorsFailBuild: false # optional, default is 
        # An optional set of paths representing artifacts to upload to the release. This may be a single path or a comma delimited list of paths (or globs)
        artifact: '**'
        # The content type of the artifact. Defaults to raw
        artifactContentType: raw # optional, default is 
        # An optional body for the release.
        # body: # optional, default is 
        # An optional body file for the release. This should be the path to the file
        # bodyFile: # optional, default is 
        # An optional commit reference. This will be used to create the tag if it does not exist.
        commit: ${{github.sha}} # optional, default is 
        # When provided this will generate a discussion of the specified category. The category must exist otherwise this will cause the action to fail. This isn't used with draft releases
        # discussionCategory: # optional, default is 
        # Optionally marks this release as a draft release. Set to true to enable.
        draft: false # optional, default is 
        # Indicates if release notes should be automatically generated.
        generateReleaseNotes: true # optional, default is false
        # Indicates if the release should be the "latest" release or not.
        makeLatest: true # optional, default is legacy
        # An optional name for the release. If this is omitted the tag will be used.
        name: Rolling R2R Build for commit ${{github.sha}} # optional, default is 
        ## Indicates if the release body should be omitted.
        #omitBody: # optional, default is false
        ## Indicates if the release body should be omitted during updates. The body will still be applied for newly created releases. This will preserve the existing body during updates.
        #omitBodyDuringUpdate: # optional, default is false
        ## Indicates if the draft flag should be omitted during updates. The draft flag will still be applied for newly created releases. This will preserve the existing draft state during updates.
        #omitDraftDuringUpdate: # optional, default is false
        ## Indicates if the release name should be omitted.
        #omitName: # optional, default is false
        ## Indicates if the release name should be omitted during updates. The name will still be applied for newly created releases. This will preserve the existing name during updates.
        #omitNameDuringUpdate: # optional, default is false
        ## Indicates if the prerelease flag should be omitted during updates. The prerelease flag will still be applied for newly created releases. This will preserve the existing prerelease state during updates.
        #omitPrereleaseDuringUpdate: # optional, default is false
        # Optionally specify the owner of the repo where the release should be generated. Defaults to current repo's owner.
        # owner: # optional, default is 
        # Optionally marks this release as prerelease. Set to true to enable.
        prerelease: true # optional, default is 
        # Indicates if existing release artifacts should be removed, Defaults to false.
        removeArtifacts: false # optional, default is false
        # Indicates if existing release artifacts should be replaced. Defaults to true.
        replacesArtifacts: true # optional, default is true
        # Optionally specify the repo where the release should be generated. Defaults to current repo
        # repo: # optional, default is 
        # When skipIfReleaseExists is enabled the action will be skipped if a non-draft release already exists for the provided tag.
        # skipIfReleaseExists: true # optional, default is false
        # An optional tag for the release. If this is omitted the git ref will be used (if it is a tag).
        tag: ${{github.sha}} # optional, default is 
        # The Github token.
        # token: # optional, default is ${{ github.token }}
        # When allowUpdates is enabled, this will fail the action if the release it is updating is not a draft or a prerelease.
        # updateOnlyUnreleased: # optional, default is false
