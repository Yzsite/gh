@using InnerTube
@using InnerTube.Models
@using InnerTube.Protobuf
@using InnerTube.Renderers
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Utils = LightTube.Utils
@model ChannelContext

@{
	Model.Title = Model.ChannelTitle;
}

<div class="channel-container">
	@if (Model.BannerUrl != null)
	{
		<div class="channel-banner">
			<img loading="lazy" class="channel-banner__img" src="@Model.BannerUrl" alt="@Model.Localization.GetString("channel.banner")">
		</div>
	}
	<div class="channel-info">
		<div class="channel-info__container">
			<img loading="lazy" class="channel-info__avatar" src="@Model.AvatarUrl" alt="@Model.ChannelTitle">
			<div class="channel-info__info">
				<span class="channel-info__name ml-1 title">@Model.ChannelTitle</span>
				<span class="channel-info__subs">@Model.Handle • @Model.Localization.FormatString("channel.header.subscribers", Model.SubscriberCount.ToKMB()) • @Model.Localization.FormatString("channel.header.videos", Model.VideoCount)</span>
				<a class="channel-info__tagline" href="@(Model.LightTubeAccount ? "" : $"/channel/{Model.Id}/about")">@Model.Tagline</a>
				<span class="channel-info__links">
					@Html.Raw(Model.PrimaryLink) @Html.Raw(Model.SecondaryLink)
				</span>
				@if (!Model.LightTubeAccount)
				{
					<div style="display: flex">
						<partial name="SubscribeButton" model="(Model.Id, Model.Localization)"/>
					</div>
				}
				else if (Model.Editable)
				{
					<a class="btn-subscribed" href="/settings/account">
						<span class="text">@Model.Localization.GetString("channel.accountsettings")</span>
					</a>
				}
		</div>
		</div>
	</div>
	<div class="channel-tabs">
		<div class="channel-tabs__container">
			@foreach (ChannelTab tab in Model.Tabs.Where(x => x.Tab != ChannelTabs.Search))
			{
				<partial name="ChannelTabItem" model="@(tab, Model.Id, Model.Localization)"/>
			}
		</div>
	</div>
	@switch (Model.CurrentTab)
	{
		case ChannelTabs.Featured:
			<div class="channel-content search-container" style="gap:0">
				<partial name="Renderers/Channel/ChannelHome" model="(Model.Content, Model.Localization)"/>
			</div>
			break;
		case ChannelTabs.Videos or ChannelTabs.Streams or ChannelTabs.Community:
		{
			<div class="channel-content search-container">
				@foreach (RendererContainer renderer in Model.Content.Where(x => x.Type != "continuation"))
				{
					<partial name="Renderer" model="(renderer, Model.Localization)"/>
				}
			</div>
			break;
		}
		case ChannelTabs.Shorts:
		{
			<div class="channel-content reel-grid">
				@foreach (RendererContainer renderer in Model.Content.Where(x => x.Type != "continuation"))
				{
					<partial name="Renderers/ReelRenderer" model="((VideoRendererData)renderer.Data, Model.Localization)"/>
				}
			</div>
			break;
		}
		default:
		{
			// TODO: impl this
			<div>@Model.CurrentTab</div>
			break;
		}
	}
</div>
@if (Model.Continuation is not null)
{
	<div class="next-page">
		<span></span>
		<span>•</span>
		<a href="@Utils.GetContinuationUrl(Context.Request.Path.ToString(), Model.Continuation)">@Model.Localization.GetString("pagination.next")</a>
	</div>
}