@using InnerTube.Renderers
@using LightTube.CustomRendererDatas
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.Extensions.Primitives
@model PlaylistContext

@{
	Model.Title = Model.PlaylistTitle;
}

<div class="playlist-page">
	<div class="playlist-page-info">
		<div class="playlist-page-thumbnail">
			<img loading="lazy" src="@Model.PlaylistThumbnail" alt="@Model.PlaylistTitle">
		</div>
		<h1 class="ml-2 title" title="@Model.PlaylistTitle">@Model.PlaylistTitle</h1>
		<a class="playlist-page-channel" href="/channel/@Model.AuthorId" title="@Model.AuthorName">@Model.AuthorName</a>
		<div class="playlist-page-info-data">
			@Model.ViewCountText&nbsp;&nbsp;@Model.LastUpdatedText
			<br><br>
			@Html.Raw(Model.PlaylistDescription)
		</div>
		@if (Model.Editable)
		{
			<div class="playlist-page-buttons">
				<a href="/editPlaylist?id=@Model.Id" target="_blank" class="icon-button" title="@Model.Localization.GetString("playlist.lighttube.delete")">
					<svg class="icon" width="20" height="20" fill="currentColor">
						<use xlink:href="/svg/bootstrap-icons.svg#pencil"/>
					</svg>
				</a>
				<a href="/deletePlaylist?id=@Model.Id" target="_blank" class="icon-button" title="@Model.Localization.GetString("playlist.lighttube.delete")">
					<svg class="icon" width="20" height="20" fill="currentColor">
						<use xlink:href="/svg/bootstrap-icons.svg#trash"/>
					</svg>
				</a>
			</div>
		}
	</div>
	<div class="playlist-page-items">
		@foreach (string alert in Model.Alerts)
		{
			<div class="playlist-alert">
				<div class="playlist-alert_text">
					@alert
				</div>
				<a class="playlist-alert_close" title="dismiss" onclick="this.parentElement.remove()">
					<svg class="icon" width="20" height="20" fill="currentColor">
						<use xlink:href="/svg/bootstrap-icons.svg#x-lg"></use>
					</svg>
				</a>
			</div>
		}
		@foreach (RendererContainer renderer in Model.Items)
		{
			switch (renderer.Type)
			{
				case "video":
					PlaylistVideoRendererData video = (PlaylistVideoRendererData)renderer.Data;
					<div class="renderer-playlistvideorenderer">
						<div class="playlist-item-index">
							@video.VideoIndexText
						</div>
						@{
							Context.Request.Query.TryGetValue("list", out StringValues l);
						}
						<a href="/watch?v=@video.VideoId&list=@l" class="compact-thumbnail">
							<img loading="lazy" src="@video.Thumbnails.LastOrDefault()?.Url" alt="@video.Title"/>
							<div class="compact-thumbnail__duration__container">
								<span class="compact-thumbnail__duration">@video.Duration.ToDurationString()</span>
							</div>
						</a>
						<div class="info">
							<a href="/watch?v=@video.VideoId[..11]&list=@l" title="@video.Title" class="ml-2 title">@video.Title</a>
							@if (video.Author != null)
							{
								<div class="ml-2">
									<a href="/channel/@video.Author.Id" title="@video.Author.Title">@video.Author.Title</a>
								</div>
							}
						</div>
						<div class="flex-divider"></div>
						<div class="icon-button-container">
							@if (video is EditablePlaylistVideoRendererData { Editable: true })
							{
								<a href="/removeFromPlaylist?v=@video.VideoId&list=@l" class="icon-button" target="_blank">
									<svg class="icon" width="20" height="20" fill="currentColor">
										<use xlink:href="/svg/bootstrap-icons.svg#trash"/>
									</svg>
								</a>
							}
						</div>
					</div>
					break;
				case "exception":
					ExceptionRendererData e = (ExceptionRendererData)renderer.Data;
					<div class="renderer-null">
						<code>@e.Message</code> while converting <code>@e.RendererCase</code>
					</div>
					break;
			}
		}
	</div>
</div>
<div class="next-page">
	<span></span>
	<span>•</span>
	@if (Model.Continuation is not null)
	{
		<a href="@Utils.GetContinuationUrl(Context.Request.GetEncodedPathAndQuery(), Model.Continuation)">@Model.Localization.GetString("pagination.next")</a>
	}
	else
	{
		<span></span>
	}
</div>