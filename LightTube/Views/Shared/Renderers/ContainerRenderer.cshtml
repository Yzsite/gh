@using InnerTube.Models
@using InnerTube.Renderers
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model (InnerTube.Renderers.ContainerRendererData Renderer, LightTube.Localization.LocalizationManager Localization)

@switch (Model.Renderer.Style)
{
	case "shelf;horizontal":
		<div class="renderer-shelfrenderer__horizontal">
			<a href="@Model.Renderer.Destination" class="ml-1 title">
				@Html.Raw(Model.Renderer.Title)
			</a>
			<div class="shelf-description">
				@Html.Raw(Model.Renderer.Subtitle)
			</div>
			<div class="shelf-contents-horizontal">
				@foreach (RendererContainer renderer in Model.Renderer.Items)
				{
					switch (renderer.Type)
					{
						case "video":
							VideoRendererData video = (VideoRendererData)renderer.Data;
							<div class="renderer-gridvideorenderer">
								<a href="/watch?v=@video.VideoId"  class="grid-thumbnail">
									<img loading="lazy" src="@video.Thumbnails.LastOrDefault()?.Url" alt="@video.Title">
									<div class="compact-thumbnail__duration__container">
										<span class="compact-thumbnail__duration">@video.Duration.ToDurationString()</span>
									</div>
								</a>
								<div class="info">
									<a href="/watch?v=@video.VideoId" class="ml-2 title" title="@video.Title">
										@video.Title
									</a>
									@if (!string.IsNullOrWhiteSpace(video.Author?.Id))
									{
										<div class="info__channel">
											<a href="/channel/@video.Author.Id" title="@video.Author.Title" class="ml-1">
												@video.Author.Title
											</a>
											@foreach (Badge channelBadge in video.Author.Badges ?? [])
											{
												<svg class="bi" width="12" height="12" fill="currentColor" title="@channelBadge.Tooltip">
													<use xlink:href="/svg/bootstrap-icons.svg#check-circle-fill"/>
												</svg>
											}
										</div>
									}
									<div>
										@video.ViewCountText • @video.PublishedText
									</div>
								</div>
							</div>
							break;
						case "playlist":
							PlaylistRendererData playlist = (PlaylistRendererData)renderer.Data;
							<div class="renderer-gridplaylistrenderer">
								<a href="/playlist?list=@playlist.PlaylistId" class="grid-thumbnail">
									<img loading="lazy" src="@playlist.Thumbnails.LastOrDefault()?.Url" alt="@playlist.Title">
									<div class="grid-thumbnail__playlist__overlay">
										<span>@playlist.VideoCount</span>
										<svg class="bi" width="20" height="20" fill="currentColor">
											<use xlink:href="/svg/bootstrap-icons.svg#list"/>
										</svg>
									</div>
								</a>
								<div class="info">
									<a href="/playlist?list=@playlist.PlaylistId" class="ml-2 title" title="@playlist.Title">
										@playlist.Title
									</a>
									<div class="info__more">
										@if (!string.IsNullOrWhiteSpace(playlist.Author?.Id))
										{
											<div class="info__channel">
												<a href="/channel/@playlist.Author.Id" title="@playlist.Author.Title" class="ml-1">
													@playlist.Author.Title
												</a>
												@foreach (Badge channelBadge in playlist.Author.Badges ?? [])
												{
													<svg class="bi" width="12" height="12" fill="currentColor" title="@channelBadge.Tooltip">
														<use xlink:href="/svg/bootstrap-icons.svg#check-circle-fill"/>
													</svg>
												}
											</div>
										}
										<div>
											<a class="playlist-view-all" href="/playlist?list=@playlist.PlaylistId">View full playlist</a>
										</div>
									</div>
								</div>
							</div>
							break;
						case "channel":
							ChannelRendererData channel = (ChannelRendererData)renderer.Data;
							<div class="renderer-gridchannelrenderer">
								<a href="/channel/@channel.ChannelId" class="grid-avatar">
									<img loading="lazy" src="@channel.Avatar.LastOrDefault()?.Url" alt="@channel.Title">
								</a>
								<div class="info">
									<a href="/channel/@channel.ChannelId" class="title ml-1" alt="@channel.Title">
										@channel.Title
									</a>
									<div>
										@channel.SubscriberCountText
									</div>
									<div>
										<partial name="SubscribeButton" model="(channel.ChannelId, Model.Localization)"/>
									</div>
								</div>
							</div>
							break;
						case "communityPost":
							CommunityPostRendererData post = (CommunityPostRendererData)renderer.Data;
							<div class="renderer-postrenderer">
								<div class="postrenderer-author">
									<img class="postrenderer-author__avatar" src="@post.Author.Avatar?.LastOrDefault()?.Url">
									<div>
										<span class="postrenderer-author__name">@post.Author.Title</span>
										•
										<span class="postrenderer-author__date">@post.PublishedText</span>
									</div>
								</div>
								<div class="postrenderer-content">
									<div class="postrenderer-content__text">
										@Html.Raw(post.Content)
									</div>
									@if (post.Attachment?.Data is CommunityPostImageRendererData image)
									{
										<div class="postrenderer-content__attachment">
											<img src="@image.Images.First().LastOrDefault()?.Url"/>
										</div>
									}
								</div>
								<div class="postrenderer-actions">
									<svg class="icon" width="20" height="20">
										<use xlink:href="/svg/bootstrap-icons.svg#hand-thumbs-up" fill="currentColor"/>
									</svg>
									<span class="postrenderer-actions__likeCount">@post.LikeCountText</span>
									<svg class="icon" width="20" height="20">
										<use xlink:href="/svg/bootstrap-icons.svg#hand-thumbs-down" fill="currentColor"/>
									</svg>
									<div class="flex-divider"></div>
									<svg class="icon" width="20" height="20">
										<use xlink:href="/svg/bootstrap-icons.svg#chat-left-text" fill="currentColor"/>
									</svg>
									<span class="postrenderer-actions__commentsCount">@post.CommentsCountText</span>
									<a href="https://www.youtube.com/channel/@post.Author.Id/community?lb=@post.PostId" title="@Model.Localization.GetString("post.view.youtube")" style="height:20px">
										<svg class="icon" width="20" height="20" fill="currentColor">
											<use xlink:href="/svg/bootstrap-icons.svg#youtube"/>
										</svg>
									</a>
								</div>
							</div>
							break;
						case "unknown":
							<div>
								<div>Unknown RendererContainer.OriginalType: <code>@renderer.OriginalType</code></div>
								@if (renderer.OriginalType == "UnknownProtobufRenderer")
								{
								<code>@Convert.ToBase64String((renderer.Data as UnknownRendererData)?.ProtobufBytes ?? [])</code>
								}
								else
								{
								<code>@((renderer.Data as UnknownRendererData)?.Json)</code>
								}
							</div>
							break;
						case "exception":
							ExceptionRendererData e = (ExceptionRendererData)renderer.Data;
							<div class="renderer-null">
								<code>@e.Message</code> while converting <code>@e.RendererCase</code>
							</div>
							break;
						default:
							<div class="renderer-null">Unexpected RendererContainer.Type: <code>@renderer.Type/@renderer.OriginalType</code></div>
							break;
					}
				}
			</div>
		</div>
		break;
	case "shelf;reel":
		<div class="renderer-reelshelfrenderer">
			<div class="reelshelf-title">
				<svg class="bi" width="24" height="24" fill="#f00">
					<use xlink:href="/svg/bootstrap-icons.svg#file-play-fill"/>
				</svg>
				@Model.Renderer.Title
			</div>
			<div class="reelshelf-items">
				@foreach (RendererContainer reel in Model.Renderer.Items)
				{
					<partial name="Renderers/ReelRenderer" model="((VideoRendererData)reel.Data, Model.Localization)"/>
				}
			</div>
		</div>
		break;
	case "shelf;vertical":
		<details class="renderer-shelfrenderer">
			<summary>
				<div class="title ml-1">
					@Model.Renderer.Title
				</div>
				@foreach (RendererContainer renderer in Model.Renderer.Items.Take(Model.Renderer.ShownItemCount ?? 2))
				{
					<partial name="Renderers/SearchRenderer" model="(renderer, Model.Localization)"/>
				}
				@if (Model.Renderer.Items.Length - (Model.Renderer.ShownItemCount ?? 2) > 0)
				{
					<div class="shelf-expand-button">
						+@(Model.Renderer.Items.Length - (Model.Renderer.ShownItemCount ?? 2)) More
					</div>
				}
			</summary>
			@foreach (RendererContainer renderer in Model.Renderer.Items.Skip(Model.Renderer.ShownItemCount ?? 2))
			{
				<partial name="Renderers/SearchRenderer" model="(renderer, Model.Localization)"/>
			}
		</details>
		break;
	case "shelf;expanded":
		<div class="renderer-shelfrenderer__expanded">
			<div class="header">
				<div class="title ml-1">
					@Model.Renderer.Title
				</div>
				<div class="shelf-description">
					@Html.Raw(Model.Renderer.Subtitle)
				</div>
			</div>
			@foreach (RendererContainer renderer in Model.Renderer.Items.Take(Model.Renderer.ShownItemCount ?? 2))
			{
				<partial name="Renderers/SearchRenderer" model="(renderer, Model.Localization)"/>
			}
		</div>
		break;
	case "ad":
		break;
	default:
		<h1>Unexpected ContainerRendererData.Style: <code>@Model.Renderer.Style</code></h1>
		break;
}