@using InnerTube.Models
@using InnerTube.Renderers
@model (IEnumerable<RendererContainer> Renderers, LightTube.Localization.LocalizationManager Localization)

@foreach (RendererContainer renderer in Model.Renderers.Select(x => x.OriginalType == "itemSectionRenderer" ? (x.Data as ContainerRendererData)!.Items.First() : x))
{
	switch (renderer.Type)
	{
		case "video":
			VideoRendererData video = (VideoRendererData)renderer.Data;
			<div class="renderer-gridvideorenderer">
				<div href="/watch?v=@video.VideoId" class="grid-thumbnail">
					<img loading="lazy" src="@video.Thumbnails.LastOrDefault()?.Url" alt="@video.Title">
					<div class="compact-thumbnail__duration__container">
						<span class="compact-thumbnail__duration">@video.Duration.ToDurationString()</span>
					</div>
					<a href="/watch?v=@video.VideoId" class="thumbnail__video-href"></a>
						<div class="thumbnail__buttons__container">
						<a href="/addToPlaylist?v=@video.VideoId" class="thumbnail__button" title="@Model.Localization.GetString("watch.save")">
							<svg class="bi" width="20" height="20" fill="currentColor">
								<use xlink:href="/svg/bootstrap-icons.svg#folder-plus"/>
							</svg>
						</a>
						<a href="/watch?v=@video.VideoId&audioOnly=true" class="thumbnail__button" title="@Model.Localization.GetString("video.listen")">
							<svg class="bi" width="20" height="20" fill="currentColor">
								<use xlink:href="/svg/bootstrap-icons.svg#headphones"/>
							</svg>
						</a>
						<a href="/download/@video.VideoId" class="thumbnail__button" title="@Model.Localization.GetString("video.download")">
							<svg class="bi" width="20" height="20" fill="currentColor">
								<use xlink:href="/svg/bootstrap-icons.svg#download"/>
							</svg>
						</a>
					</div>
				</div>
				<div class="info">
					<a href="/watch?v=@video.VideoId" class="ml-2 title" title="@video.Title">
						@video.Title
					</a>
					@if (!string.IsNullOrWhiteSpace(video.Author?.Id))
					{
						<div class="info__channel">
							<a href="/channel/@video.Author.Id" title="@video.Author.Title" class="ml-1">
								@video.Author.Title
							</a>
							@foreach (Badge channelBadge in video.Author.Badges ?? [])
							{
								<svg class="bi" width="12" height="12" fill="currentColor" title="@channelBadge.Tooltip">
									<use xlink:href="/svg/bootstrap-icons.svg#check-circle-fill"/>
								</svg>
							}
						</div>
					}
					<div>
						@video.ViewCountText â€¢ @video.PublishedText
					</div>
				</div>
			</div>
			break;
		case "playlist":
			PlaylistRendererData playlist = (PlaylistRendererData)renderer.Data;
			<div class="renderer-gridplaylistrenderer">
				<a href="/playlist?list=@playlist.PlaylistId" class="grid-thumbnail">
					<img loading="lazy" src="@playlist.Thumbnails.LastOrDefault()?.Url" alt="@playlist.Title">
					<div class="grid-thumbnail__playlist__overlay">
						<span>@playlist.VideoCount</span>
						<svg class="bi" width="20" height="20" fill="currentColor">
							<use xlink:href="/svg/bootstrap-icons.svg#list"/>
						</svg>
					</div>
				</a>
				<div class="info">
					<a href="/playlist?list=@playlist.PlaylistId" class="ml-2 title" title="@playlist.Title">
						@playlist.Title
					</a>
					<div class="info__more">
						@if (!string.IsNullOrWhiteSpace(playlist.Author?.Id))
						{
							<div class="info__channel">
								<a href="/channel/@playlist.Author.Id" title="@playlist.Author.Title" class="ml-1">
									@playlist.Author.Title
								</a>
								@foreach (Badge channelBadge in playlist.Author.Badges ?? [])
								{
									<svg class="bi" width="12" height="12" fill="currentColor" title="@channelBadge.Tooltip">
										<use xlink:href="/svg/bootstrap-icons.svg#check-circle-fill"/>
									</svg>
								}
							</div>
						}
						<div>
							<a class="playlist-view-all" href="/playlist?list=@playlist.PlaylistId">View full playlist</a>
						</div>
					</div>
				</div>
			</div>
			break;
		case "channel":
			ChannelRendererData channel = (ChannelRendererData)renderer.Data;
			<div class="renderer-gridchannelrenderer">
				<a href="/channel/@channel.ChannelId" class="grid-avatar">
					<img loading="lazy" src="@channel.Avatar.LastOrDefault()?.Url" alt="@channel.Title">
				</a>
				<div class="info">
					<a href="/channel/@channel.ChannelId" class="title ml-1" alt="@channel.Title">
						@channel.Title
					</a>
					<div>
						@channel.SubscriberCountText
					</div>
					<div>
						<partial name="SubscribeButton" model="channel.ChannelId"/>
					</div>
				</div>
			</div>
			break;
		case "unknown":
			<div>
				<div>Unknown RendererContainer.OriginalType: <code>@renderer.OriginalType</code></div>
				if (renderer.OriginalType == "UnknownProtobufRenderer")
				{
				<code>@Convert.ToBase64String((renderer.Data as UnknownRendererData)?.ProtobufBytes ?? [])</code>
				}
				else
				{
				<code>@((renderer.Data as UnknownRendererData)?.Json)</code>
				}
			</div>
			break;
		case "exception":
			ExceptionRendererData e = (ExceptionRendererData)renderer.Data;
			<div class="renderer-null">
				<code>@e.Message</code> while converting <code>@e.RendererCase</code>
			</div>
			break;
		default:
			<div class="renderer-null">Unexpected RendererContainer.Type: <code>@renderer.Type/@renderer.OriginalType</code></div>
			break;
	}
}